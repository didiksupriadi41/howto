By default, all JAR files belong to `%{_javadir}` directory and all POM files
belong to `%{_mavenpomdir}` directory. When building Maven project, the build
system needs to be able to map the Maven artifacts to corresponding JAR files
installed in `%{_javadir}`. Depmap files solve this problem. They are also known
as Maven fragment files and normally are stored in `%{_mavendepmapfragdir}`.

.Simple depmap file
[source,xml]
--------
<?xml version="1.0" encoding="US-ASCII"?>
<dependencyMap>
  <dependency>
    <maven>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.17</version>
    </maven>
    <jpp>
      <groupId>JPP</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.17</version>
    </jpp>
  </dependency>
</dependencyMap>
--------

The depmap above consists of two main parts. First is "`<maven>`" part. This
part identifies upstream Maven artifact. In this case it is artifact
`log4j:log4j:1.2.17`. The second part is "`<jpp>`" part. This part carries
information where on filesystem the Maven artifact from "`<maven>`" part can be
found.  Let's look at "`<jpp>`" child nodes more closely:

[source,xml]
--------
<groupId>JPP</groupId>
--------

This node identifies directory where the JAR file is located. "JPP" always
translates to `%{_javadir}` directory. For example, if JAR file lies in
directory `%{_javadir}/log4j_subdir/` the node would look like
`<groupId>JPP/log4j_subdir</groupId>`

[source,xml]
--------
<artifactId>log4j</artifactId>
--------

This basically says that name of the JAR file providing `log4j:log4j` artifact
is `log4j.jar`.

If build system looks for artifact `log4j:log4j` it can find it in
`%{_javadir}/log4j.jar`.

Depmap files typically provide more information than just mapping between
artifact and file. Very useful information is list of dependencies required by
the artifact. Having this information means that RPM package doesn't need to
explicitly list packages on which the package depends on. other required
packages can be taken from depmap file.

.Typical depmap file
[source,xml]
--------
<?xml version="1.0" encoding="US-ASCII"?>
<dependencyMap>
  <requiresJava>1.5</requiresJava>
  <dependency>
    <maven>
      <groupId>commons-dbcp</groupId>
      <artifactId>commons-dbcp</artifactId>
      <version>1.4</version>
    </maven>
    <jpp>
      <groupId>JPP</groupId>
      <artifactId>apache-commons-dbcp</artifactId>
      <version>1.4</version>
    </jpp>
  </dependency>
  <autoRequires>
    <groupId>commons-pool</groupId>
    <artifactId>commons-pool</artifactId>
  </autoRequires>
  <autoRequires>
    <groupId>org.apache.geronimo.specs</groupId>
    <artifactId>geronimo-jta_1.1_spec</artifactId>
  </autoRequires>
</dependencyMap>
--------

The depmap above contains two `<autoRequires>` elements. These provide valuable
information about artifact dependencies.

The depmaps are automatically generated during package build, but only if the
build system is Maven. Projects built by some other build system usually need to
call `%add_maven_depmap` macro which generates the depmap for them. However,
depmaps generated by `%add_maven_depmap` don't contain all the information. Most
importantly, such depmaps are missing information about package dependencies and
therefore package maintaner needs to list them manually.

