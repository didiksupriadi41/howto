Many repeating tasks when packaging Java software can be automated. Most of the
time they are RPM macros or shell scripts.

==== Macros for pom.xml modification

Sometimes Maven `pom.xml` files need to be patched before they are used to build
packages. One could use traditional patches to maintain changes, but package
maintainers should use `%pom_*` macros developed specially to ease this
task.

These macros are designed to be called from `%prep` section of spec files. They
are documented in `/etc/rpm/macros.fjava` configuration file, which is also
link:https://git.fedorahosted.org/cgit/javapackages.git/plain/etc/macros.fjava[available online]
and all the macros also have their own manual page. See the manual pages
for technical details how to use them. Below are some examples added for
convenience.


Often dependencies specified in Maven `pom.xml` files need to be removed because
of different reasons. `%pom_remove_dep` macro can be used to ease this task:

.Removing dependencies from pom.xml files
[source,spec]
--------
# Removes dependency on groupId:artifactId from ./pom.xml
%pom_remove_dep groupId:artifactId

# Removes dependency on groupId:artifactId from ./submodule/pom.xml
%pom_remove_dep groupId:artifactId submodule

# Removes dependency on groupId:artifactId from ./full/path/to/file.pom
%pom_remove_dep groupId:artifactId full/path/to/file.pom

# Removes dependency on all artifacts in group groupId from ./pom.xml
%pom_remove_dep groupId:

# Removes all dependencies from ./pom.xml
%pom_remove_dep :
--------

[TIP]
=======
Dependencies can also be added to pom.xml with `%pom_add_dep` macro, but this
may be a bug in upstream project if one needs to add extra dependency in order
to build the project.
=======

`%pom_remove_plugin` macro works exactly as `%pom_remove_dep`, except it removes
Maven plugin invocations. Some examples:

.Removing Maven plugins from pom.xml files
[source,spec]
--------
# Disables maven-jar-plugin so that classpath isn't included in manifests
%pom_remove_plugin :maven-jar-plugin

# Disable a proprietary plugin that isn't packaged for Fedora
%pom_remove_plugin com.example.mammon:useless-proprietary-plugin submodule
--------

Sometimes some submodules of upstream project cannot be built for various
reasons and there is a need to disable them. This can be achieved by using
`%pom_disable_module`, for example:

.Disabling specific project modules
[source,spec]
--------
# Disables child-module-1, a submodule of the main pom.xml file
%pom_disable_module child-module-1

# Disables grandchild-module, a submodule of child-module-2/pom.xml
%pom_disable_module grandchild-module child-module-2
--------

Macro `%pom_remove_parent` removes reference
to a parent POM from Maven POM files. This can be useful when parent POM
is not yet packaged (e.g. because of licensing issues) and at the same time it's
not really needed for building of the project. There are also macros for adding
parent POM reference (`%pom_add_parent`) and replacing existing reference
with new one (`%pom_set_parent`).

.Manipulating parent POM references
[source,spec]
--------
# Remove reference to a parent POM from ./pom.xml
%pom_remove_parent

# Remove reference to a parent POM from ./submodule/pom.xml
%pom_remove_parent submodule

# Add parent POM reference to ./pom.xml
%pom_add_parent groupId:artifactId

# Replace existing parent POM reference in ./pom.xml
%pom_set_parent groupId:artifactId:version
--------

The above macros cover the most common cases of modifying `pom.xml` files,
however if there is a need to apply some less-common patches there are also two
generic macros for modifying `pom.xml` files. `%pom_xpath_remove` can be used to
remove arbitrary XML nodes, described by link:http://www.w3.org/TR/xpath/[XPath]
1.0 expressions. `%pom_xpath_inject` macro is capable of injecting arbitrary
link:http://www.w3.org/TR/xml/[XML] code to any `pom.xml` file. Below you can find
some examples for these macros.

.Less common pom.xml modifications
[source,spec]
--------
# Removes parent definition
%pom_xpath_remove "pom:parent"

# Removes extensions from the build
%pom_xpath_remove "pom:build/pom:extensions" module/pom.xml

# Adds new dependency
%pom_xpath_inject "pom:dependencies" "
                  <dependency>
                        <groupId>org.example.project</groupId>
                        <artifactId>awesomeproject</artifactId>
                        <version>1.0.0.GA</version>
                  </dependency>"

# Use a bit more complex XPath to add additional exclusion into
# maven-wagon dependency
%pom_xpath_inject "pom:dependency[pom:artifactId[text()='maven-wagon']]/pom:exclusions" "
        <exclusion>
            <groupId>antlr</groupId>
            <artifactId>antlr</artifactId>
        </exclusion>"
--------

.Handling XML namespaces
[NOTE]
=======
POM files use a specific namespace - http://maven.apache.org/POM/4.0.0. The
easiest way to respect this namespace in XPath expressions is prefixing all node
names with `pom:`. For example, `pom:environment/pom:os` will work because it
selects nodes from `pom` namespace, but `environment/os` won't find anything
because it looks for nodes that don't belong to any XML namespace.
=======
Using `%pom_*` macros not only increases readability of the spec file, but also
improves maintainability of the package as there are no patches that would need
to be rebased with each upstream release.

==== add_maven_depmap macro

Maven identifies JAR files by a set of strings: groupId, artifactId and version
(mostly). To let XMvn know what groupId:artifactId corresponds to which
POM or JAR file, we may use the `%add_maven_depmap` macro. However, if package
is build in standard way (i.e.: `%mvn_build` and `%mvn_install`), then calling
`%add_maven_depmap` is neither needed nor recommended.  This macro is usually
useful only for packages that use other build tool than Maven (e.g.: ant,
gradle).  It creates files in `%{_mavendepmapfragdir}` that map
groupId:artifactId pairs to JAR files under `%{_javadir}`. These files are
called depmap fragments. The macro can read the groupId and artifactId from the
POM file or maintainer can pass this information as an argument.  All fragments
in `%{_mavendepmapfragdir}` directory are read by XMvn, allowing the
locally installed JAR and POM files to be used as a maven repository.

Note that -- unless you use the `-f` option as shown below -- all
depmap fragments for a given package are written to the same file,
`%{_mavendepmapfragdir}/%{name}`. You should be sure to include this
file in the `%files` section of your RPM.

For the macro to work properly, all JAR files must be copied into `%{_javadir}`
and all POM files must be copied into `%{_mavenpomdir}` and given file names of
the following form, where `jarname` is the name of the JAR without the .jar
suffix:

[source,spec]
--------
%{_mavenpomdir}/JPP[.subdirectory]-jarname.pom
--------

Note that the subdirectory is only necessary if the JAR file is put into a
subdirectory of `%{_javadir}`. For example:

* For junit, the JAR is `%{_javadir}/junit.jar`, so the POM would be
  `%{_mavenpomdir}/JPP-junit.pom`.
* For plexus-ant-factory, the JAR is `%{_javadir}/plexus/ant-factory.jar`, so
  the POM would named `%{_mavenpomdir}/JPP.plexus-ant-factory.pom`.

If a POM is installed with no corresponding JAR file -- for example, for parent
POM files -- the same convention should be followed:

* The Apache commons parent POM is installed in
  `%{_mavenpomdir}/JPP-commons-parent.pom`.

In its simplest form (a POM without a JAR file), `%add_maven_depmap` looks like
this:

.Parent POM
[source,spec]
--------
%add_maven_depmap JPP-%{name}.pom
--------

This will read the POM file in question and provide a mapping between the
groupId and artifactId inside the POM file and the POM file placed into
`%{_mavenpomdir}`.

For a POM that maps directly to a JAR file, the following is the correct form:

.Standard invocation
[source,spec]
--------
%add_maven_depmap JPP-%{name}.pom %{name}.jar
--------

In addition to creating the POM mapping, this will also ensure that the correct
JAR is associated with the groupId and artifactId from the POM.

Even if there is no POM file from some reason, it is still possilbe to generate
mapping between Maven artifact and corresponding JAR file:

[source,spec]
--------
%add_maven_depmap groupId:artifactId[:extension[:classifier]]:version %{name}.jar
--------

.Providing additional artifact mappings
[source,spec]
--------
%add_maven_depmap JPP-%{name}.pom %{name}.jar -a "org.apache.commons:commons-lang"
--------
This form also adds additional mappings for given POM/JAR file. For example, if
the POM file indicates that it contains groupId commons-lang, artifactId
commons-lang, this form ensures that we also add a mapping between groupId
org.apache.commons and the installed POM/JAR files. This is necessary in cases
where the groupId or artifactId may have changed, and other packages might
require different IDs than those reflected in the installed POM.

.Multiple subpackages
[source,spec]
--------
%add_maven_depmap JPP-%{name}.pom %{name}.jar -f "XXX"
--------
This form stores dependency mapping inside `%{_mavendepmapfragdir}/%{name}-XXX`
instead of standard location. This is useful for packages with multiple
subpackages where each has its own JAR files.

.Multiple artifacts in a subdirectory
[source,spec]
--------
%add_maven_depmap JPP.%{name}-sub.pom %{name}/sub.jar
--------

This form should be used when a package consists of multiple JAR files that are
installed into a subdirectory of `%{_javadir}`. Note that in this case, the POM
file name includes the optional subdirectory field.

==== Replacing JARs with symlinks using xmvn-subst

Sometimes it may be needed to replace all JAR files in current directory with
symlinks to the system JARs located in `%{_javadir}`. This task can be achieved
using tool called `xmvn-subst`.

[source,shell]
--------
$ ls -l
-rw-r--r--. 1 msrb msrb  40817 Oct 22 09:16 cli.jar
-rw-r--r--. 1 msrb msrb 289983 Oct 22 09:17 junit4.jar
-rw-r--r--. 1 msrb msrb 474276 Oct 22 09:14 log4j.jar
$ xmvn-subst .
[INFO] Linked ./cli.jar to /usr/share/java/commons-cli.jar
[INFO] Linked ./log4j.jar to /usr/share/java/log4j.jar
[INFO] Linked ./junit4.jar to /usr/share/java/junit.jar
$ ls -la
lrwxrwxrwx. 1 msrb msrb   22 Oct 22 10:08 cli.jar -> /usr/share/java/commons-cli.jar
lrwxrwxrwx. 1 msrb msrb   22 Oct 22 10:08 junit4.jar -> /usr/share/java/junit.jar
lrwxrwxrwx. 1 msrb msrb   22 Oct 22 10:08 log4j.jar -> /usr/share/java/log4j.jar
--------

The example above shows how easy the symlinking can be. However, there are some
limitations. Original JAR files need to carry metadata which tell xmvn-subst
for what artifact given file should be substituted. Otherwise `xmvn-subst` won't
be able to identify the Maven artifact from JAR file.

[TIP]
======
See `xmvn-subst -h` for all available options.
======
