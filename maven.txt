[quote,,http://maven.apache.org]
______
Apache Maven is a software project management and comprehension tool. Based on
the concept of a project object model (POM), Maven can manage a project's build,
reporting and documentation from a central piece of information.
______

Maven is by far the most consistent Java build system, allowing large amount of
automation. In most common situations only following steps are necessary:

1. In `%build` section of the spec file use `%mvn_build` macro
2. In `%install` section, use `%mvn_install` macro
3. Use generated file `.mfiles` lists to populate `%files` section with `-f` switch

.Common spec file sections
[source,spec]
--------
BuildRequires:  maven-local
...
%build
%mvn_build
...

%install
%mvn_install
...


%files -f .mfiles
%dir %{_javadir}/%{name}

%files javadoc -f .mfiles-javadoc
-------


The macros `%mvn_build` and `%mvn_install` automatically handle building of the
JAR files and their subsequent installation to the correct directory. The
corresponding POM and <<Xdepmap,depmap>> files are also installed.

==== Additional Mappings ====
[[pom_jar_mapping]]

The macro `%mvn_alias` can be used to add additional mappings for given POM/JAR
file. For example, if the POM file indicates that it contains groupId
commons-lang, artifactId commons-lang, this macro ensures that we also add a
mapping between groupId org.apache.commons and the installed JAR/POM files. This
is necessary in cases where the groupId or artifactId may have changed, and
other packages might require different IDs than those reflected in the installed
POM.

.Adding more mappings for JAR/POM files example
[source,spec]
-------
%prep
...
%mvn_alias "commons-lang:commons-lang" "org.apache.commons:commons-lang"
-------

==== Alternative JAR File Names ====
In some cases, it may be important to be able to provide symlinks to actual JAR
files. This can be achieved with `%mvn_file` macro. This macro allows packager
to specify names of the JAR files, their location in `%{_javadir}` directory and
also can create symlinks to the JAR files. These symlinks can be possibly
located outside of the `%{_javadir}` directory.

.Adding file symlinks to compatibility
[source,spec]
-------
%prep
...
%mvn_file :guice google/guice guice
-------

This means that JAR file for artifact with ID "guice" (and any groupId) will be
installed in `%{_javadir}/google/guice.jar` and there also will be a symlink to
this JAR file located in `%{_javadir}/guice.jar`. Note the macro will add ".jar"
extensions automatically.

==== Single Artifact Per Package ====
If the project consists of multiple artifacts, it is recommended to install each
artifact to the separate subpackage. The macro `%mvn_build -s` will generate
separate `.mfiles` file for every artifact in the project. This file contains
list of files related to specific artifact (typically JAR file, POM file and
depmap). It can be later used in `%files` section of the spec file.

.Creating one subpackage for each generated artifact
[source,spec]
-------
...
%description
The Maven Plugin Tools contains...

%package -n maven-plugin-annotations
Summary:        Maven Plugin Java 5 Annotations

%description -n maven-plugin-annotations
This package contains Java 5 annotations to use in Mojos.

%package -n maven-plugin-plugin
Summary:        Maven Plugin Plugin

%description -n maven-plugin-plugin
The Plugin Plugin is used to...
...

%build
%mvn_build -s

%install
%mvn_install

%files -f .mfiles-maven-plugin-tools
%doc LICENSE NOTICE
%files -n maven-plugin-annotations -f .mfiles-maven-plugin-annotations
%files -n maven-plugin-plugin      -f .mfiles-maven-plugin-plugin
%files -f .mfiles-javadoc
...
-------

==== Assignment of the Maven Artifacts to the Subpackages ====
The macro `%mvn_package` allows maintainer to specify in which exact package the
selected artifact will end up. It is something between singleton packaging, when
each artifact has its own subpackage and default packaging, when all artifacts
end up in the same package.

.Assigning multiple artifacts to single subpackage
[source,spec]
-------
...
%prep
%mvn_package ":plexus-compiler-jikes"   plexus-compiler-extras
%mvn_package ":plexus-compiler-eclipse" plexus-compiler-extras
%mvn_package ":plexus-compiler-csharp"  plexus-compiler-extras

%build
%mvn_build

%install
%mvn_install

%files -f .mfiles
%files -f .mfiles-plexus-compiler-extras
%files -f .mfiles-javadoc
-------

In above example, the artifacts `plexus-compiler-jikes`,
`plexus-compiler-eclipse`, `plexus-compiler-csharp` will end up in package named
`plexus-compiler-extras`. If there are some other artifacts beside these three
mentioned (e.g. some parent POMs), then these will all end up in package named
`%{name}`.

[TIP]
======
`%mvn_package` macro supports wildcards and brace expansions, so whole `%prep` section from previous example can be replaced with single line:
`%mvn_package ":plexus-compiler-{jikes,eclipse,csharp}" plexus-compiler-extras`
======

It is possible to assign artifacts into a package called `__noinstall`. This package
name has a special meaning. And as you can guess, artifacts assigned into this
package won't be installed anywhere and the package itself won't be created.

.Skipping installation of an artifact
[source,spec]
-------
%prep
...
%mvn_package groupId:artifactId __noinstall
-------

.XMvn package relationships
image:images/xmvn.svg["XMvn related packages",width=600]
